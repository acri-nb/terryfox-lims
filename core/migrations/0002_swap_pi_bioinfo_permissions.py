# Generated by Django 4.2.20 on 2025-03-13 15:48

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def swap_permissions(apps, schema_editor):
    """
    Swap permissions between PI and Bioinformatician groups.
    - PI becomes read-only
    - Bioinformatician gets CRUD permissions
    """
    # Get the groups
    pi_group = Group.objects.get(name='PI')
    bioinfo_group = Group.objects.get(name='Bioinformatician')
    
    # Clear existing permissions
    pi_group.permissions.clear()
    bioinfo_group.permissions.clear()
    
    # Get content types for our models
    project_ct = ContentType.objects.get(app_label='core', model='project')
    case_ct = ContentType.objects.get(app_label='core', model='case')
    accession_ct = ContentType.objects.get(app_label='core', model='accession')
    comment_ct = ContentType.objects.get(app_label='core', model='comment')
    
    # Get view permissions for all models
    view_project = Permission.objects.get(content_type=project_ct, codename='view_project')
    view_case = Permission.objects.get(content_type=case_ct, codename='view_case')
    view_accession = Permission.objects.get(content_type=accession_ct, codename='view_accession')
    view_comment = Permission.objects.get(content_type=comment_ct, codename='view_comment')
    
    # Get CRUD permissions for all models
    add_project = Permission.objects.get(content_type=project_ct, codename='add_project')
    change_project = Permission.objects.get(content_type=project_ct, codename='change_project')
    delete_project = Permission.objects.get(content_type=project_ct, codename='delete_project')
    
    add_case = Permission.objects.get(content_type=case_ct, codename='add_case')
    change_case = Permission.objects.get(content_type=case_ct, codename='change_case')
    delete_case = Permission.objects.get(content_type=case_ct, codename='delete_case')
    
    add_accession = Permission.objects.get(content_type=accession_ct, codename='add_accession')
    change_accession = Permission.objects.get(content_type=accession_ct, codename='change_accession')
    delete_accession = Permission.objects.get(content_type=accession_ct, codename='delete_accession')
    
    add_comment = Permission.objects.get(content_type=comment_ct, codename='add_comment')
    change_comment = Permission.objects.get(content_type=comment_ct, codename='change_comment')
    delete_comment = Permission.objects.get(content_type=comment_ct, codename='delete_comment')
    
    # Assign view-only permissions to PI
    pi_group.permissions.add(view_project, view_case, view_accession, view_comment)
    
    # Assign CRUD permissions to Bioinformatician
    bioinfo_group.permissions.add(
        # View permissions
        view_project, view_case, view_accession, view_comment,
        # Create permissions
        add_project, add_case, add_accession, add_comment,
        # Update permissions
        change_project, change_case, change_accession, change_comment,
        # Delete permissions
        delete_project, delete_case, delete_accession, delete_comment
    )


def reverse_swap_permissions(apps, schema_editor):
    """
    Reverse the swap of permissions between PI and Bioinformatician groups.
    - PI gets CRUD permissions back
    - Bioinformatician becomes read-only again
    """
    # Get the groups
    pi_group = Group.objects.get(name='PI')
    bioinfo_group = Group.objects.get(name='Bioinformatician')
    
    # Clear existing permissions
    pi_group.permissions.clear()
    bioinfo_group.permissions.clear()
    
    # Get content types for our models
    project_ct = ContentType.objects.get(app_label='core', model='project')
    case_ct = ContentType.objects.get(app_label='core', model='case')
    accession_ct = ContentType.objects.get(app_label='core', model='accession')
    comment_ct = ContentType.objects.get(app_label='core', model='comment')
    
    # Get view permissions for all models
    view_project = Permission.objects.get(content_type=project_ct, codename='view_project')
    view_case = Permission.objects.get(content_type=case_ct, codename='view_case')
    view_accession = Permission.objects.get(content_type=accession_ct, codename='view_accession')
    view_comment = Permission.objects.get(content_type=comment_ct, codename='view_comment')
    
    # Get CRUD permissions for all models
    add_project = Permission.objects.get(content_type=project_ct, codename='add_project')
    change_project = Permission.objects.get(content_type=project_ct, codename='change_project')
    delete_project = Permission.objects.get(content_type=project_ct, codename='delete_project')
    
    add_case = Permission.objects.get(content_type=case_ct, codename='add_case')
    change_case = Permission.objects.get(content_type=case_ct, codename='change_case')
    delete_case = Permission.objects.get(content_type=case_ct, codename='delete_case')
    
    add_accession = Permission.objects.get(content_type=accession_ct, codename='add_accession')
    change_accession = Permission.objects.get(content_type=accession_ct, codename='change_accession')
    delete_accession = Permission.objects.get(content_type=accession_ct, codename='delete_accession')
    
    add_comment = Permission.objects.get(content_type=comment_ct, codename='add_comment')
    change_comment = Permission.objects.get(content_type=comment_ct, codename='change_comment')
    delete_comment = Permission.objects.get(content_type=comment_ct, codename='delete_comment')
    
    # Assign view-only permissions to Bioinformatician
    bioinfo_group.permissions.add(view_project, view_case, view_accession, view_comment)
    
    # Assign CRUD permissions to PI
    pi_group.permissions.add(
        # View permissions
        view_project, view_case, view_accession, view_comment,
        # Create permissions
        add_project, add_case, add_accession, add_comment,
        # Update permissions
        change_project, change_case, change_accession, change_comment,
        # Delete permissions
        delete_project, delete_case, delete_accession, delete_comment
    )


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(swap_permissions, reverse_swap_permissions),
    ]
