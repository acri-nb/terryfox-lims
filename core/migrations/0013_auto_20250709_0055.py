# Generated by Django 4.2.20 on 2025-07-09 03:55

from django.db import migrations


def recalculate_case_tiers(apps, schema_editor):
    """Recalculate tier for all existing cases with the new logic."""
    Case = apps.get_model('core', 'Case')
    
    # Get all cases
    cases = Case.objects.all()
    updated_count = 0
    
    for case in cases:
        # Calculate new tier using the corrected logic
        old_tier = case.tier
        
        # Return FAIL if any coverage value is missing
        if any(value is None for value in [case.rna_coverage, case.dna_t_coverage, case.dna_n_coverage]):
            new_tier = 'FAIL'
        else:
            # Tier A: DNA(T) >= 80X, DNA(N) >= 30X, RNA >= 100M reads
            if case.dna_t_coverage >= 80 and case.dna_n_coverage >= 30 and case.rna_coverage >= 100:
                new_tier = 'A'
            # Tier B: 30X <= DNA(T) < 80X, DNA(N) >= 30X, RNA >= 100M reads
            elif (30 <= case.dna_t_coverage < 80) and case.dna_n_coverage >= 30 and case.rna_coverage >= 100:
                new_tier = 'B'
            # FAIL: DNA(T) < 30X OR DNA(N) < 30X OR RNA < 100M reads
            else:
                new_tier = 'FAIL'
        
        # Update tier if it changed
        if old_tier != new_tier:
            case.tier = new_tier
            case.save()
            updated_count += 1
    
    print(f"Updated {updated_count} cases with corrected tier calculations.")


def reverse_recalculate_case_tiers(apps, schema_editor):
    """Reverse operation - not implemented as it's not practical to restore previous incorrect values."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0012_add_projectlead_permissions'),
    ]

    operations = [
        migrations.RunPython(recalculate_case_tiers, reverse_recalculate_case_tiers),
    ]
