#!/bin/bash

# Script de surveillance (watchdog) pour TerryFox LIMS
# V√©rifie que le service fonctionne correctement et le red√©marre si n√©cessaire

LOG_FILE="/var/log/terryfox-lims/watchdog.log"

# Fonction de logging
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# V√©rifier si le processus Gunicorn est en cours d'ex√©cution
check_gunicorn_process() {
    if pgrep -f "gunicorn.*terryfox_lims.wsgi_prod" > /dev/null; then
        log_message "‚úÖ Le processus Gunicorn LIMS est actif"
        return 0
    else
        log_message "‚ùå Le processus Gunicorn LIMS n'est pas trouv√©"
        return 1
    fi
}

# V√©rifier si le serveur web r√©pond correctement
check_http_response() {
    local response_code
    response_code=$(timeout 10 curl -k -s -o /dev/null -w "%{http_code}" https://localhost:443/ 2>/dev/null)
    
    if [[ "$response_code" =~ ^(200|301|302)$ ]]; then
        log_message "‚úÖ Le serveur web r√©pond correctement (code: $response_code)"
        return 0
    else
        log_message "‚ùå Le serveur web ne r√©pond pas correctement (code: $response_code)"
        return 1
    fi
}

# V√©rifier l'utilisation de la m√©moire du processus
check_memory_usage() {
    local memory_usage
    memory_usage=$(ps -o pid,ppid,cmd,%mem --sort=-%mem | grep "gunicorn.*terryfox_lims" | head -1 | awk '{print $4}')
    
    if [ -n "$memory_usage" ]; then
        # Convertir en nombre entier pour comparaison
        memory_int=$(echo "$memory_usage" | cut -d. -f1)
        
        if [ "$memory_int" -gt 80 ]; then
            log_message "‚ö†Ô∏è  Utilisation m√©moire √©lev√©e: ${memory_usage}%"
            return 1
        else
            log_message "‚úÖ Utilisation m√©moire normale: ${memory_usage}%"
            return 0
        fi
    else
        log_message "‚ùå Impossible de d√©terminer l'utilisation m√©moire"
        return 1
    fi
}

# Red√©marrer le service
restart_service() {
    log_message "üîÑ Red√©marrage du service terryfox-lims..."
    systemctl restart terryfox-lims.service
    
    # Attendre un peu et v√©rifier si le red√©marrage a r√©ussi
    sleep 10
    
    if check_gunicorn_process; then
        log_message "‚úÖ Service red√©marr√© avec succ√®s"
        return 0
    else
        log_message "‚ùå √âchec du red√©marrage du service"
        return 1
    fi
}

# Fonction principale de v√©rification
main_check() {
    log_message "=== D√âBUT DE LA V√âRIFICATION WATCHDOG ==="
    
    local need_restart=false
    
    # V√©rifier le processus Gunicorn
    if ! check_gunicorn_process; then
        need_restart=true
    fi
    
    # V√©rifier la r√©ponse HTTP seulement si le processus existe
    if [ "$need_restart" = false ]; then
        if ! check_http_response; then
            need_restart=true
        fi
    fi
    
    # V√©rifier l'utilisation m√©moire seulement si le processus existe
    if [ "$need_restart" = false ]; then
        check_memory_usage  # Ne pas red√©marrer pour la m√©moire, juste logger
    fi
    
    # Red√©marrer si n√©cessaire
    if [ "$need_restart" = true ]; then
        restart_service
    else
        log_message "‚úÖ Tous les contr√¥les sont OK"
    fi
    
    log_message "=== FIN DE LA V√âRIFICATION WATCHDOG ==="
    echo "" >> "$LOG_FILE"  # Ligne vide pour s√©parer les v√©rifications
}

# Cr√©er le r√©pertoire de logs s'il n'existe pas
mkdir -p /var/log/terryfox-lims
touch "$LOG_FILE"

# Ex√©cuter la v√©rification principale
main_check

exit 0
